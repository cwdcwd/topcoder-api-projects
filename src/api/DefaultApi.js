/**
 * tc-project-service
 * Services that provide access and interaction with user projects.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddMilestoneRequest', 'model/AddMilestoneResponse', 'model/BillingAccountBody', 'model/BillingAccountPostResponse', 'model/CopilotDeleteResponse', 'model/CopilotPostResponse', 'model/CopilotRequestBody', 'model/GenericResponse', 'model/PermissionsBody', 'model/ProjectGetResponse', 'model/ProjectPermissionsGetResponse', 'model/ProjectPostResponse', 'model/ProjectRequestBody', 'model/UserProjectsGetResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddMilestoneRequest'), require('../model/AddMilestoneResponse'), require('../model/BillingAccountBody'), require('../model/BillingAccountPostResponse'), require('../model/CopilotDeleteResponse'), require('../model/CopilotPostResponse'), require('../model/CopilotRequestBody'), require('../model/GenericResponse'), require('../model/PermissionsBody'), require('../model/ProjectGetResponse'), require('../model/ProjectPermissionsGetResponse'), require('../model/ProjectPostResponse'), require('../model/ProjectRequestBody'), require('../model/UserProjectsGetResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.TcProjectService) {
      root.TcProjectService = {};
    }
    root.TcProjectService.DefaultApi = factory(root.TcProjectService.ApiClient, root.TcProjectService.AddMilestoneRequest, root.TcProjectService.AddMilestoneResponse, root.TcProjectService.BillingAccountBody, root.TcProjectService.BillingAccountPostResponse, root.TcProjectService.CopilotDeleteResponse, root.TcProjectService.CopilotPostResponse, root.TcProjectService.CopilotRequestBody, root.TcProjectService.GenericResponse, root.TcProjectService.PermissionsBody, root.TcProjectService.ProjectGetResponse, root.TcProjectService.ProjectPermissionsGetResponse, root.TcProjectService.ProjectPostResponse, root.TcProjectService.ProjectRequestBody, root.TcProjectService.UserProjectsGetResponse);
  }
}(this, function(ApiClient, AddMilestoneRequest, AddMilestoneResponse, BillingAccountBody, BillingAccountPostResponse, CopilotDeleteResponse, CopilotPostResponse, CopilotRequestBody, GenericResponse, PermissionsBody, ProjectGetResponse, ProjectPermissionsGetResponse, ProjectPostResponse, ProjectRequestBody, UserProjectsGetResponse) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the directProjectsPost operation.
     * @callback module:api/DefaultApi~directProjectsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectPostResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Project
     * @param {module:model/ProjectRequestBody} body 
     * @param {module:api/DefaultApi~directProjectsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectPostResponse}
     */
    this.directProjectsPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling directProjectsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProjectPostResponse;

      return this.apiClient.callApi(
        '/direct/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the directProjectsProjectIdBillingaccountDelete operation.
     * @callback module:api/DefaultApi~directProjectsProjectIdBillingaccountDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BillingAccountPostResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Billing Account
     * @param {String} projectId the project id
     * @param {module:model/BillingAccountBody} body 
     * @param {module:api/DefaultApi~directProjectsProjectIdBillingaccountDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BillingAccountPostResponse}
     */
    this.directProjectsProjectIdBillingaccountDelete = function(projectId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling directProjectsProjectIdBillingaccountDelete");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling directProjectsProjectIdBillingaccountDelete");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BillingAccountPostResponse;

      return this.apiClient.callApi(
        '/direct/projects/{projectId}/billingaccount', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the directProjectsProjectIdBillingaccountPost operation.
     * @callback module:api/DefaultApi~directProjectsProjectIdBillingaccountPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BillingAccountPostResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate Billing Account
     * @param {String} projectId the project id
     * @param {module:model/BillingAccountBody} body 
     * @param {module:api/DefaultApi~directProjectsProjectIdBillingaccountPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BillingAccountPostResponse}
     */
    this.directProjectsProjectIdBillingaccountPost = function(projectId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling directProjectsProjectIdBillingaccountPost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling directProjectsProjectIdBillingaccountPost");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BillingAccountPostResponse;

      return this.apiClient.callApi(
        '/direct/projects/{projectId}/billingaccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the directProjectsProjectIdCopilotDelete operation.
     * @callback module:api/DefaultApi~directProjectsProjectIdCopilotDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopilotDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Copilot
     * @param {String} projectId the project id
     * @param {module:model/CopilotRequestBody} body 
     * @param {module:api/DefaultApi~directProjectsProjectIdCopilotDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopilotDeleteResponse}
     */
    this.directProjectsProjectIdCopilotDelete = function(projectId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling directProjectsProjectIdCopilotDelete");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling directProjectsProjectIdCopilotDelete");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CopilotDeleteResponse;

      return this.apiClient.callApi(
        '/direct/projects/{projectId}/copilot', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the directProjectsProjectIdCopilotPost operation.
     * @callback module:api/DefaultApi~directProjectsProjectIdCopilotPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopilotPostResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Copilot
     * @param {String} projectId the project id
     * @param {module:model/CopilotRequestBody} body 
     * @param {module:api/DefaultApi~directProjectsProjectIdCopilotPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopilotPostResponse}
     */
    this.directProjectsProjectIdCopilotPost = function(projectId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling directProjectsProjectIdCopilotPost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling directProjectsProjectIdCopilotPost");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CopilotPostResponse;

      return this.apiClient.callApi(
        '/direct/projects/{projectId}/copilot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the directProjectsProjectIdGet operation.
     * @callback module:api/DefaultApi~directProjectsProjectIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves project general info
     * @param {String} projectId the project id
     * @param {module:api/DefaultApi~directProjectsProjectIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectGetResponse}
     */
    this.directProjectsProjectIdGet = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling directProjectsProjectIdGet");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProjectGetResponse;

      return this.apiClient.callApi(
        '/direct/projects/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the directProjectsProjectIdMilestonesPost operation.
     * @callback module:api/DefaultApi~directProjectsProjectIdMilestonesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddMilestoneResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Milestone
     * @param {String} projectId the project id
     * @param {module:model/AddMilestoneRequest} body 
     * @param {module:api/DefaultApi~directProjectsProjectIdMilestonesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddMilestoneResponse}
     */
    this.directProjectsProjectIdMilestonesPost = function(projectId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling directProjectsProjectIdMilestonesPost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling directProjectsProjectIdMilestonesPost");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AddMilestoneResponse;

      return this.apiClient.callApi(
        '/direct/projects/{projectId}/milestones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the directProjectsProjectIdPermissionsDelete operation.
     * @callback module:api/DefaultApi~directProjectsProjectIdPermissionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Project Permissions
     * @param {String} projectId the project id
     * @param {module:model/PermissionsBody} body 
     * @param {module:api/DefaultApi~directProjectsProjectIdPermissionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResponse}
     */
    this.directProjectsProjectIdPermissionsDelete = function(projectId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling directProjectsProjectIdPermissionsDelete");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling directProjectsProjectIdPermissionsDelete");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericResponse;

      return this.apiClient.callApi(
        '/direct/projects/{projectId}/permissions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the directProjectsProjectIdPermissionsGet operation.
     * @callback module:api/DefaultApi~directProjectsProjectIdPermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectPermissionsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves project permissions list
     * @param {String} projectId the project id
     * @param {module:api/DefaultApi~directProjectsProjectIdPermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectPermissionsGetResponse}
     */
    this.directProjectsProjectIdPermissionsGet = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling directProjectsProjectIdPermissionsGet");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProjectPermissionsGetResponse;

      return this.apiClient.callApi(
        '/direct/projects/{projectId}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the directProjectsProjectIdPermissionsPost operation.
     * @callback module:api/DefaultApi~directProjectsProjectIdPermissionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Project Permissions
     * @param {String} projectId the project id
     * @param {module:model/PermissionsBody} body 
     * @param {module:api/DefaultApi~directProjectsProjectIdPermissionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResponse}
     */
    this.directProjectsProjectIdPermissionsPost = function(projectId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling directProjectsProjectIdPermissionsPost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling directProjectsProjectIdPermissionsPost");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericResponse;

      return this.apiClient.callApi(
        '/direct/projects/{projectId}/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the directProjectsProjectIdPermissionsPut operation.
     * @callback module:api/DefaultApi~directProjectsProjectIdPermissionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Project Permissions
     * @param {String} projectId the project id
     * @param {module:model/PermissionsBody} body 
     * @param {module:api/DefaultApi~directProjectsProjectIdPermissionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResponse}
     */
    this.directProjectsProjectIdPermissionsPut = function(projectId, body, callback) {
      var postBody = body;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling directProjectsProjectIdPermissionsPut");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling directProjectsProjectIdPermissionsPut");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericResponse;

      return this.apiClient.callApi(
        '/direct/projects/{projectId}/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the directProjectsUserGet operation.
     * @callback module:api/DefaultApi~directProjectsUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProjectsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves user projects
     * @param {module:api/DefaultApi~directProjectsUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProjectsGetResponse}
     */
    this.directProjectsUserGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserProjectsGetResponse;

      return this.apiClient.callApi(
        '/direct/projects/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
